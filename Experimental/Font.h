#ifndef __FONT_H__
#define __FONT_H__

#include <string.h>
#include "Vector.h"

inline bool IsNumeric(const char c) {
	return ((c >= '0') && (c <= '9'));
}
inline bool IsAlpha(const char c) {
	return (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')));
}
inline char ToUpper(const char c) {
	if ((c >= 'a') && (c <= 'z')) {
		return c - 32;
	}
	return c;
}

const unsigned char SimpleFont[] = {
	// Space
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// !
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// "
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// #
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,1,1,1,1,1,0,
	0,0,1,0,1,0,0,
	0,1,1,1,1,1,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// $
	0,0,0,1,0,0,0,
	0,0,1,1,1,1,0,
	0,1,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,1,0,0,0,
	
	// %
	0,0,0,0,0,0,0,
	0,1,1,0,0,1,0,
	0,1,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,1,0,
	0,1,0,0,1,1,0,
	0,0,0,0,0,0,0,
	
	// &
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,1,1,0,
	0,0,1,1,0,0,1,
	
	// '
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// (
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// )
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// *
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// +
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ?!
	0,1,0,1,0,1,0,
	1,1,1,1,1,1,1,
	0,1,0,1,0,1,0,
	1,1,1,1,1,1,1,
	0,1,0,1,0,1,0,
	1,1,1,1,1,1,1,
	0,1,0,0,0,1,0,
	
	// -
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// .
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// /
	0,0,0,0,0,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// 0
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 1
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// 2
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// 3
	0,0,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 4
	0,0,0,0,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// 5
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 6
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 7
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// 8
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 9
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// :
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ;
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// <
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// =
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// >
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ?
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,1,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// @
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// A
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,	
	
	// B
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// C
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// D
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// E
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// F
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// G
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// H
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// I
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// J
	0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// K
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// L
	0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// M
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,1,0,1,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// N
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,1,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// O
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// P
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// Q
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,1,1,0,
	0,0,1,1,1,1,0,
	0,0,0,0,0,0,1,
	
	// R
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// S
	0,0,0,0,0,0,0,
	0,0,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// T
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// U
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// V
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// W
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,1,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// X
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// Y
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// Z
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// [
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// \_
	0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,0,0,0,	
	
	// ]
	0,0,0,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// ^
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// _
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// `
	0,0,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
};

void DrawPoint(Image* output, const uvec2& position, const Vector4ub& color, const unsigned int size = 1) {
	if (size == 1) {
		output->setRawPixel(position.x, position.y, color);
	} else {
		for (unsigned int x = 0; x < size; ++x) {
			for (unsigned int y = 0; y < size; ++y) {
				output->setRawPixel(position.x + x, position.y + y, color);
			}
		}
	}
}
inline uvec2 GetTextSize(const char* text, unsigned int size = 1) {
	const unsigned int length = strlen(text);
	return uvec2(length * 7 * size, 7 * size);
}

inline bool IsPrintable(const char c) {
	return ((c >= ' ') && (c <= '`'));
}

inline bool IsLower(const char c) {
	return ((c >= 'a') && (c <= 'z'));
}

void DrawText(Image *output, const uvec2& position, const char *text, const Vector4ub color = Vector4ub(), const unsigned int size = 1) {
	const unsigned int length = strlen(text);
	unsigned int offset = 0;

	for (unsigned int index = 0; index < length; ++index) {
		unsigned int charOffset  = 0;
		char c = text[index];

		c = ToUpper(c);
		
		if (IsPrintable(c) == false) {
			continue;
		}
		
		charOffset = (c - ' ') * 49;
		for (unsigned int x = 0; x < 7; ++x) {
			for (unsigned int y = 0; y < 7; ++y) {
				unsigned int pixel = SimpleFont[charOffset + y * 7 + x];
				if (pixel == 0) {
					continue;
				}
				DrawPoint(output, uvec2(position.x + x * size + offset, position.y + y * size), color, size);
			}
		}
		offset += 7 * size;
	}
}

void DrawText(Image *output, const uvec2& position, const Vector4ub color, const unsigned int size, const char *format ...) {
	char buffer[1024];

    va_list args;
    va_start(args, format);
 
	vsnprintf(buffer, sizeof(buffer), format, args);
	DrawText(output, position, buffer, color, size);
 
    va_end(args);
}

#endif // __FONT_H__