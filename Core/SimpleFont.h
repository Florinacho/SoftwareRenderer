#ifndef __FONT_H__
#define __FONT_H__

#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdint.h>

#include "Image.h"

const unsigned char SimpleFont[] = {
	// Space
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// !
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// "
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// #
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,1,1,1,1,1,0,
	0,0,1,0,1,0,0,
	0,1,1,1,1,1,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// $
	0,0,0,1,0,0,0,
	0,0,1,1,1,1,0,
	0,1,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,1,0,0,0,
	
	// %
	0,0,0,0,0,0,0,
	0,1,1,0,0,1,0,
	0,1,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,1,0,
	0,1,0,0,1,1,0,
	0,0,0,0,0,0,0,
	
	// &
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,1,1,0,
	0,0,1,1,0,0,1,
	
	// '
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// (
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// )
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// *
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// +
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	
	// -
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// .
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// /
	0,0,0,0,0,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// 0
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 1
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// 2
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// 3
	0,0,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 4
	0,0,0,0,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,1,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// 5
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 6
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 7
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// 8
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// 9
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// :
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ;
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	
	// <
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// =
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// >
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// ?
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,1,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// @
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// A
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,	
	
	// B
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// C
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// D
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// E
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// F
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// G
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// H
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// I
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// J
	0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// K
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// L
	0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// M
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,1,0,1,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// N
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,1,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// O
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// P
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// Q
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,1,1,0,
	0,0,1,1,1,1,0,
	0,0,0,0,0,0,1,
	
	// R
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// S
	0,0,0,0,0,0,0,
	0,0,1,1,1,1,0,
	0,1,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,1,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// T
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// U
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// V
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// W
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,1,0,0,0,1,0,
	0,1,0,1,0,1,0,
	0,1,1,0,1,1,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// X
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,1,0,0,0,1,0,
	0,0,0,0,0,0,0,
	
	// Y
	0,0,0,0,0,0,0,
	0,1,0,0,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// Z
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// [
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// \_
	0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,0,1,0,
	0,0,0,0,0,0,0,	
	
	// ]
	0,0,0,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// ^
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// _
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,0,0,0,0,0,
	
	// `
	0,0,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// a
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// b
	0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,0,0,0,0,0,
	0,1,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// c
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// d
	0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// e
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,1,1,1,0,0,
	0,1,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// f
	0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// g
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,1,0,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,1,1,0,0,0,
	
	// h
	0,0,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// i
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// j
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	
	// k
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// l
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// m
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,0,1,0,0,
	0,1,0,1,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,1,0,1,0,
	0,0,0,0,0,0,0,
	
	// n
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// o
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// p
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	
	// q
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,1,0,0,
	0,0,0,0,1,0,0,
	0,0,0,0,1,0,0,
	
	// r
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,
	
	// s
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// t
	0,0,0,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,0,0,0,0,
	0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// u
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// v
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// w
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,0,1,0,1,0,
	0,1,0,1,0,1,0,
	0,1,0,1,0,1,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,	
	
	// x
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,0,0,0,0,
	
	// y
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,0,1,0,0,
	0,0,1,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	
	// z
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,1,1,1,1,0,0,
	0,0,0,0,0,0,0,
	
	// {
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	
	// |
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	
	// }
	0,0,1,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,0,0,0,0,
	
	// ~
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,1,1,0,0,1,
	0,1,0,0,1,1,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
};

static void DrawPoint(Image* output, const uvec2& position, const Vector4ub& color, const unsigned int size = 1) {
	if (size == 1) {
		output->setPixel(position.x, position.y, color);
	} else {
		for (unsigned int x = 0; x < size; ++x) {
			for (unsigned int y = 0; y < size; ++y) {
				output->setPixel(position.x + x, position.y + y, color);
			}
		}
	}
}
inline uvec2 GetTextSize(const char* text, unsigned int size = 1) {
	const unsigned int length = strlen(text);
	return uvec2(length * 7 * size, 7 * size);
}

inline bool IsPrintable(const char c) {
	return ((c >= ' ') && (c <= '~'));
}

inline bool IsLower(const char c) {
	return ((c >= 'a') && (c <= 'z'));
}

void DrawText(Image *output, const uvec2& position, const char *text, const Vector4ub color = Vector4ub(), const unsigned int size = 1) {
	const unsigned int length = strlen(text);
	unsigned int offset = 0;

	for (unsigned int index = 0; index < length; ++index) {
		unsigned int charOffset  = 0;
		const char c = text[index];

		if (IsPrintable(c)) {
			charOffset = (c - ' ') * 49;
			for (unsigned int x = 0; x < 7; ++x) {
				for (unsigned int y = 0; y < 7; ++y) {
					unsigned int pixel = SimpleFont[charOffset + y * 7 + x];
					if (pixel == 0) {
						continue;
					}
					DrawPoint(output, uvec2(position.x + x * size + offset, position.y + y * size), color, size);
				}
			}
		}
		offset += 7 * size;
	}
}

void DrawText(Image *output, const uvec2& position, const char *text, int length, const Vector4ub color = Vector4ub(), const unsigned int size = 1) {
	unsigned int offset = 0;

	for (unsigned int index = 0; index < length; ++index) {
		unsigned int charOffset  = 0;
		const char c = text[index];
		
		if (IsPrintable(c)) {
			charOffset = (c - ' ') * 49;
			for (unsigned int x = 0; x < 7; ++x) {
				for (unsigned int y = 0; y < 7; ++y) {
					unsigned int pixel = SimpleFont[charOffset + y * 7 + x];
					if (pixel == 0) {
						continue;
					}
					DrawPoint(output, uvec2(position.x + x * size + offset, position.y + y * size), color, size);
				}
			}
		}
		offset += 7 * size;
	}
}

static void DrawCenteredText(Image *output, const ivec4& rect, const char *text, const Vector4ub color = Vector4ub(), const unsigned int size = 1) {
	const unsigned int length = strlen(text);
	const unsigned int width = (rect.z - rect.x);
	const unsigned int height = (rect.w - rect.y);
	if (height < 7 * size) {
		return;
	}

	const int k = width / (7 * size);
	const unsigned int characterCount = length < k ? length : k;	
	
	unsigned int offsetX = width / 2 - (characterCount * 7 * size) / 2;
	unsigned int offsetY = height / 2 - (1 * 7 * size) / 2;


	DrawText(output, uvec2(rect.x + offsetX, rect.y + offsetY), text, characterCount, color, size);
}

void DrawText(Image *output, const uvec2& position, const Vector4ub color, const unsigned int size, const char *format ...) {
	char buffer[1024];

    va_list args;
    va_start(args, format);
 
	vsnprintf(buffer, sizeof(buffer), format, args);
	DrawText(output, position, buffer, color, size);
 
    va_end(args);
}


inline void DrawCharacter(Image* output, char c, const ivec2& position = ivec2(), const ubvec4& color = ubvec4(), uint32_t size = 1) {
	if (IsPrintable(c) == false) {
		return;
	}
	
	const uint32_t tokenIndex = c - ' ';
	const uint32_t offset = tokenIndex * 49;
	
	for (uint32_t y = 0; y < 7; ++y) {
		for (uint32_t x = 0; x < 7; ++x) {
			const uint32_t pixelIndex = y * 7 + x;
			const uint32_t pixel = SimpleFont[offset + pixelIndex];
			if (pixel) {
				DrawPoint(output, uvec2(position.x + x * size, position.y + y * size), color, size);
			}
		}
	}
}

static void DrawText(Image *output, const ivec4& bounds, const char *text, const ubvec4& color = Vector4ub(), uint32_t size = 1, uint32_t flags = 0) {
	const int step = 7 * size;
	ivec2 position(bounds.x, bounds.y);
	while (*text != '\0') {
		switch (*text) {
		case '\n' :
			position.x = bounds.x;
			position.y += step;
			break;
		default :
			if ((position.x <= bounds.z - step) && (position.y <= bounds.w - step)) {
				DrawCharacter(output, *text, position, color, size);
			}
			position.x += step;
		}
		++text;
	}
}

#endif // __FONT_H__